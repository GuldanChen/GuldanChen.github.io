<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>技术和生活</title>
  
  <subtitle>Talk is cheap. Show me the code.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-16T11:59:43.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>GuldanChen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>做我们这行毕业证到底重要不重要?</title>
    <link href="http://yoursite.com/2018/06/16/%E5%81%9A%E6%88%91%E4%BB%AC%E8%BF%99%E8%A1%8C%E6%AF%95%E4%B8%9A%E8%AF%81%E5%88%B0%E5%BA%95%E9%87%8D%E8%A6%81%E4%B8%8D%E9%87%8D%E8%A6%81/"/>
    <id>http://yoursite.com/2018/06/16/做我们这行毕业证到底重要不重要/</id>
    <published>2018-06-16T11:12:58.000Z</published>
    <updated>2018-06-16T11:59:43.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="对于学历我的个人看法和经历"><a href="#对于学历我的个人看法和经历" class="headerlink" title="对于学历我的个人看法和经历"></a>对于学历我的个人看法和经历</h4><p>&emsp;&emsp;其实对于我们这行学历对于大部分人来说貌似没有什么特别重要的联系(除非你是搞算法之类的),因为平常工作中接触最多的技术就是一些优秀框架使用,已经设计思想和原理,这些东西个人觉得只要愿意学习都是可以学会理解的.学历作为敲门砖,这块砖的质量觉得你的求职上限.<br><br>&emsp;&emsp;前几天准备换工作来着,因为一直在外包做,最近客户那边也没什么事儿就出去找工作,面了两家,一家微医,一家有赞,其中拿到了微医的offer,但是出于各种原因最终没去,我们主要说说有赞的经历,因为简历上面没有写有关于学历的东西,电面过后有幸就被邀请面试,面试还算ok,<br>大概面了三轮,第一主要面技术,2个人面试. 进来就直接进入主题,让我先自我介绍和讲讲自己的做的项目,哎….其实我特别不习惯自我介绍和介绍项目这个环节,然后就巴拉巴拉的讲了一些…..然后就各种问技术相关方面的大概一个小时,完了之后让我等待.<br><br>&emsp;&emsp;第二轮,来了个中年人,看来应该是他们的头头,进来也是让我自我介绍,哎…无奈,然后就巴拉巴拉讲了一通,然后问了一些比较底层的问题,我的回答中规中矩吧,知道的就说不知道就直接说不知道不搪塞.然后聊了一下他们团队的一些情况,还互相留了微信(此时我心里大概知道应该是妥了),聊了大概40来分钟,然后又让我等待.<br>等了大概10分钟,来了一个美女,然后各种聊规划什么,然后问起我学历问题,我坦言说我因为休学没有毕业,额……然后她说你岂不是没有毕业? 我回答:”你可以当我是个高中生”.然后就说要去问下让我等下,大概过了5分钟就说 “今天就先面到这里!”.我大概知道凉了,当时心情很复杂.<br><br>&emsp;&emsp;这件事让我知道学历真的很重要,学历就像是包装盒,没有包装盒的产品普遍被认为是劣质的产品,即使你是优质产品,即使包装盒对于产品使用来说并没什么卵关系,但是没有包装盒你就是会被人认为是劣质产品.</p><h4 id="我觉得没有学历的不可怕-可怕的是你因为没学历而放弃成为优质产品的理想-虽然你需比其他人付出更多的努力更多的汗水来证明自己也是优质产品-但这些努力和汗水是值得的-当然大家不要错误的理解为学历不重要-学历还是很重要的能让你少走很多冤枉路-哎我现在就时常后悔为什么当年不好好在大学学习"><a href="#我觉得没有学历的不可怕-可怕的是你因为没学历而放弃成为优质产品的理想-虽然你需比其他人付出更多的努力更多的汗水来证明自己也是优质产品-但这些努力和汗水是值得的-当然大家不要错误的理解为学历不重要-学历还是很重要的能让你少走很多冤枉路-哎我现在就时常后悔为什么当年不好好在大学学习" class="headerlink" title="我觉得没有学历的不可怕,可怕的是你因为没学历而放弃成为优质产品的理想,虽然你需比其他人付出更多的努力更多的汗水来证明自己也是优质产品,但这些努力和汗水是值得的!当然大家不要错误的理解为学历不重要,学历还是很重要的能让你少走很多冤枉路,哎我现在就时常后悔为什么当年不好好在大学学习!!!"></a>我觉得没有学历的不可怕,可怕的是你因为没学历而放弃成为优质产品的理想,虽然你需比其他人付出更多的努力更多的汗水来证明自己也是优质产品,但这些努力和汗水是值得的!当然大家不要错误的理解为学历不重要,学历还是很重要的能让你少走很多冤枉路,哎我现在就时常后悔为什么当年不好好在大学学习!!!</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;对于学历我的个人看法和经历&quot;&gt;&lt;a href=&quot;#对于学历我的个人看法和经历&quot; class=&quot;headerlink&quot; title=&quot;对于学历我的个人看法和经历&quot;&gt;&lt;/a&gt;对于学历我的个人看法和经历&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;其实对于我们这行学历对于大部
      
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="生活杂谈" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>半饥饿状态思维非常清晰</title>
    <link href="http://yoursite.com/2018/06/13/%E5%8D%8A%E9%A5%A5%E9%A5%BF%E7%8A%B6%E6%80%81%E6%80%9D%E7%BB%B4%E9%9D%9E%E5%B8%B8%E6%B8%85%E6%99%B0/"/>
    <id>http://yoursite.com/2018/06/13/半饥饿状态思维非常清晰/</id>
    <published>2018-06-13T07:55:53.000Z</published>
    <updated>2018-06-13T08:00:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天发现半饥饿状态下工作思维非常清晰………….<br>看来以后吃饭不能吃太饱,差不多6成饱就好了😆😆😀😀</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天发现半饥饿状态下工作思维非常清晰………….&lt;br&gt;看来以后吃饭不能吃太饱,差不多6成饱就好了😆😆😀😀&lt;/p&gt;

      
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="生活杂谈" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>测试分级</title>
    <link href="http://yoursite.com/2018/06/12/%E6%B5%8B%E8%AF%95%E5%88%86%E7%BA%A7/"/>
    <id>http://yoursite.com/2018/06/12/测试分级/</id>
    <published>2018-06-12T14:26:49.000Z</published>
    <updated>2018-06-13T07:59:43.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
      <category term="测试分级" scheme="http://yoursite.com/categories/java/%E6%B5%8B%E8%AF%95%E5%88%86%E7%BA%A7/"/>
    
    
      <category term="测试" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>锁</title>
    <link href="http://yoursite.com/2018/06/12/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81-%E5%B9%82%E7%AD%89-%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>http://yoursite.com/2018/06/12/分布式锁-幂等-到底是什么/</id>
    <published>2018-06-12T10:00:23.000Z</published>
    <updated>2018-06-16T15:11:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于锁锁"><a href="#关于锁锁" class="headerlink" title="关于锁锁"></a>关于锁锁</h3><h4 id="什么是锁"><a href="#什么是锁" class="headerlink" title="什么是锁?"></a>什么是锁?</h4><p>&emsp;&emsp; 这个问题我觉得没啥必要回答,你可以称之为锁,你也可以叫他链子,张三,李四都可以,😀😀,皮一下,锁是大家公认的名词而已,我们主要看他解决了什么问题.</p><h4 id="锁解决了什么问题"><a href="#锁解决了什么问题" class="headerlink" title="锁解决了什么问题?"></a>锁解决了什么问题?</h4><p>&emsp;&emsp;众所周知高并发编程中线程安全是重要的关注点,那造成线程安全的主要问题是什么?最主要就是多个线程存在操作和使用临界资源(共享资源),为了解决这个问题我们需要一个机制,这个机制就是保证同一时刻有且只有一个线程在操作临界资源,这种方式有个高尚的名称叫互斥锁,也就是说当一个共享数据被当前正在访问的线程加上互斥锁后，在同一个时刻，其他线程只能处于等待的状态，直到当前线程处理完毕释放该锁。在java中可以使用synchronized关键字(保证可见性(主要是共享数据的变化被其他线程所看到)，完全可以替代Volatile功能),和Lock类两种锁其中主要区别如下</p><table><thead><tr><th>类别</th><th>synchronized</th><th>Lock</th></tr></thead><tbody><tr><td>存在层次</td><td>Java的关键字，在jvm层面上</td><td>是一个类</td></tr><tr><td>锁的释放</td><td>1、以获取锁的线程执行完同步代码，释放锁 2、线程执行发生异常，jvm会让线程释放锁</td><td>在finally中必须释放锁，不然容易造成线程死锁</td></tr><tr><td>锁的获取</td><td>假设A线程获得锁，B线程等待。如果A线程阻塞，B线程会一直等待</td><td>分情况而定，Lock有多个锁获取的方式，具体下面会说道，大致就是可以尝试获得锁，线程可以不用一直等待</td></tr><tr><td>锁状态</td><td>无法判断</td><td>可以判断</td></tr><tr><td>锁类型</td><td>可重入 不可中断 非公平</td><td>可重入 可判断 可公平（两者皆可）</td></tr><tr><td>性能</td><td>1.6版本优化之后性能同lock差不多,官方推荐</td><td>大量同步</td></tr><tr><td>锁使用</td><td>1:修饰实例方法，作用于当前实例加锁，进入同步代码前要获得当前实例的锁<br>2:修饰静态方法，作用于当前类对象加锁，进入同步代码前要获得当前类对象的锁(对于静态方法锁,锁对象是当前class对象)<br>3:修饰代码块，指定加锁对象，对给定对象加锁，进入同步代码库前要获得给定对象的锁。</td><td>在加锁和解锁处需要通过lock()和unlock()显示指出就可以,nulocak一般写在finally块中</td></tr></tbody></table><p><a href="URL" title="http://www.blogjava.net/xylz/archive/2010/07/07/325410.html">关于lock原理参考这篇博文(非常棒)</a></p><h3 id="目前设计锁的分类"><a href="#目前设计锁的分类" class="headerlink" title="目前设计锁的分类"></a>目前设计锁的分类</h3><p>主流为乐观锁,悲观锁,自旋锁,重入锁<br><a href="URL" title="https://blog.csdn.net/a314773862/article/details/54095819">关于锁类型介绍参考这篇博文</a></p><h4 id="关于使用锁的思考"><a href="#关于使用锁的思考" class="headerlink" title="关于使用锁的思考"></a>关于使用锁的思考</h4><p>我们在使用锁的时候应该要清楚为什么使用锁使用什么锁,它能为我们带来什么缺点是什么,不要盲目使用锁!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;关于锁锁&quot;&gt;&lt;a href=&quot;#关于锁锁&quot; class=&quot;headerlink&quot; title=&quot;关于锁锁&quot;&gt;&lt;/a&gt;关于锁锁&lt;/h3&gt;&lt;h4 id=&quot;什么是锁&quot;&gt;&lt;a href=&quot;#什么是锁&quot; class=&quot;headerlink&quot; title=&quot;什么是锁?&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
      <category term="锁" scheme="http://yoursite.com/categories/java/%E9%94%81/"/>
    
    
      <category term="锁" scheme="http://yoursite.com/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>java spi</title>
    <link href="http://yoursite.com/2018/06/12/dubbo-spi%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/2018/06/12/dubbo-spi特性/</id>
    <published>2018-06-12T05:21:50.000Z</published>
    <updated>2018-06-13T07:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JAVA-SPI浅析"><a href="#JAVA-SPI浅析" class="headerlink" title="JAVA SPI浅析"></a>JAVA SPI浅析</h3><p>spi最典型的实例应用就是jdbc4.0,在jdbc4.0之前我们加载一个jdbc驱动通过<code>Class.forName</code>加载驱动,例子如下:  </p><pre><code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);  Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306&quot;test&quot;, &quot;root&quot;, &quot;123456&quot;);  Statement stmt = conn.createStatement();  ResultSet rs = stmt.executeQuery(&quot;select * from Users&quot;);  </code></pre><p>上面是jdbc4.0 加载驱动方式,<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code>这里虽是加载mysql的driver,但是无论是oracle还是其它的jdbc驱动包，它们的原理都是spi机制。我们来看<code>java.sql.Driver</code>接口,这个接口在jdk中没有实现,这个接口是具体的个个数据厂商实现的.</p><p><strong><em>Dubbo扩展点记载从JDK标准的SPI(Service Provider Interface)扩展点发现机制加强而来.</em></strong></p><h4 id="Dubbo改进了JDK标准SPI的几个问题-核心类-ExtensionLoader"><a href="#Dubbo改进了JDK标准SPI的几个问题-核心类-ExtensionLoader" class="headerlink" title="Dubbo改进了JDK标准SPI的几个问题  核心类(ExtensionLoader)"></a>Dubbo改进了JDK标准SPI的几个问题  核心类(ExtensionLoader)</h4><ul><li>JDK标准的SPI会一次性实例化扩展点所有实例,如果扩展实现初始化很耗时,但是如果没有用上也会被加载,这是非常浪费资源的.</li><li>如果扩展加载失败了,启动不会报错,而在使用时会报不支持错误,比如: JDK 标准的<br>ScriptEngine，通过 getName() 获取脚本类型的名称，但如果RubyScriptEngine 因为所依赖的 jruby.jar 不存在，导致 RubyScriptEngine 类加载失败，这个失败原因被吃掉了，和 ruby 对应不起来，当用户执行 ruby脚本时,会报不支持ruby，而不是真正失败的原因。</li><li>增加了对扩展点 IoC 和 AOP 的支持一个扩展点可以直接 setter 注入其它扩展点。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JAVA-SPI浅析&quot;&gt;&lt;a href=&quot;#JAVA-SPI浅析&quot; class=&quot;headerlink&quot; title=&quot;JAVA SPI浅析&quot;&gt;&lt;/a&gt;JAVA SPI浅析&lt;/h3&gt;&lt;p&gt;spi最典型的实例应用就是jdbc4.0,在jdbc4.0之前我们加载一个j
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="spi" scheme="http://yoursite.com/tags/spi/"/>
    
  </entry>
  
</feed>
